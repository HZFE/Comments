syntax = "proto3";

package comment;

import "google/protobuf/any.proto";
import "google/api/annotations.proto";

message User {
    int32 uid = 1;
    string name = 2;
    string avatar = 3;
    string email = 4;
    string website = 5;
}

message Vote {
    int32 up = 1;
    int32 down = 2;
}

message CommentContent {
    string content = 1;
    repeated int32 at = 2;
}

message Comment {
    int32 id = 1;
    CommentContent content = 2;
    User user = 3;
    int32 timestamp = 4;
    Vote vote = 5;
    int32 like = 6;
    Comment sub = 7;
    map<string, string> meta = 8;
}

message GetCommentsReq {
    google.protobuf.Any uuid = 1;
}
message GetCommentsRes {
    int32 code = 1;
    repeated Comment comments = 2;
}

message AddCommentReq {
    int32 id = 1; // Parent comment's id
    google.protobuf.Any uuid = 2;
    repeated int32 at = 3;
    string content = 4;
    User user = 5;
}
message AddCommentRes {
    int32 code = 1;
}

message VoteCommentReq {
    int32 id = 1;
    int32 type = 2;
}
message VoteCommentRes {
    int32 code = 1;
}

message LikeCommentReq {
    int32 id = 1;
}
message LikeCommentRes {
    int32 code = 1;
}

service CommentService {
    rpc GetComments (GetCommentsReq) returns (GetCommentsRes) {
        option (google.api.http) = {
            get: "/v1/comments"
        };
    }
    rpc AddComment (AddCommentReq) returns (AddCommentRes) {
        option (google.api.http) = {
            post: "/v1/comment",
            body: "*"
        };
    }
    rpc VoteComment (VoteCommentReq) returns (VoteCommentRes) {
        option (google.api.http) = {
            post: "/v1/comment/vote/{id}/{type}",
            additional_bindings = {
                delete: "/v1/comment/vote/{id}/{type}",
            }
        };
    }
    rpc LikeComment (LikeCommentReq) returns (LikeCommentRes) {
        option (google.api.http) = {
            post: "/v1/comment/like/{id}",
            additional_bindings = {
                delete: "/v1/comment/like/{id}",
            }
        };
    }
}
